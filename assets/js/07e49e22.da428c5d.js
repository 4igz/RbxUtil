"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2013],{37078:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a ClientComm object.\\n\\nIf `usePromise` is set to `true`, then `GetFunction` will generate a function that returns a Promise\\nthat resolves with the server response. If set to `false`, the function will act like a normal\\ncall to a RemoteFunction and yield until the function responds.","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"usePromise","desc":"","lua_type":"boolean"},{"name":"namespace","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"ClientComm"}],"function_type":"static","source":{"line":642,"path":"modules/comm/init.lua"}},{"name":"GetFunction","desc":"Generates a function on the matching RemoteFunction generated with ServerComm. The function\\ncan then be called to invoke the server. If this `ClientComm` object was created with\\nthe `usePromise` parameter set to `true`, then this generated function will return\\na Promise when called.\\n\\n```lua\\n-- Server-side:\\nlocal serverComm = ServerComm.new(someParent)\\nserverComm:BindFunction(\\"MyFunction\\", function(player, msg)\\n\\treturn msg:upper()\\nend)\\n\\n-- Client-side:\\nlocal clientComm = ClientComm.new(someParent)\\nlocal myFunc = clientComm:GetFunction(\\"MyFunction\\")\\nlocal uppercase = myFunc(\\"hello world\\")\\nprint(uppercase) --\x3e HELLO WORLD\\n\\n-- Client-side, using promises:\\nlocal clientComm = ClientComm.new(someParent, true)\\nlocal myFunc = clientComm:GetFunction(\\"MyFunction\\")\\nmyFunc(\\"hi there\\"):andThen(function(msg)\\n\\tprint(msg) --\x3e HI THERE\\nend):catch(function(err)\\n\\tprint(\\"Error:\\", err)\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"inboundMiddleware","desc":"","lua_type":"ClientMiddleware?"},{"name":"outboundMiddleware","desc":"","lua_type":"ClientMiddleware?"}],"returns":[{"desc":"","lua_type":"(...: any) -> any"}],"function_type":"method","source":{"line":694,"path":"modules/comm/init.lua"}},{"name":"GetSignal","desc":"Returns a new ClientRemoteSignal that mirrors the matching RemoteSignal created by\\nServerComm with the same matching `name`.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"inboundMiddleware","desc":"","lua_type":"ClientMiddleware?"},{"name":"outboundMiddleware","desc":"","lua_type":"ClientMiddleware?"}],"returns":[{"desc":"","lua_type":"ClientRemoteSignal"}],"function_type":"method","source":{"line":706,"path":"modules/comm/init.lua"}},{"name":"BuildObject","desc":"Returns an object which maps RemoteFunctions as methods\\nand RemoteEvents as fields.\\n```lua\\n-- Server-side:\\nserverComm:BindFunction(\\"Test\\", function(player) end)\\nserverComm:CreateSignal(\\"MySignal\\")\\n\\n-- Client-side\\nlocal obj = clientComm:BuildObject()\\nobj:Test()\\nobj.MySignal:Connect(function() end)\\n```","params":[{"name":"inboundMiddleware","desc":"","lua_type":"ClientMiddleware?"},{"name":"outboundMiddleware","desc":"","lua_type":"ClientMiddleware?"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","source":{"line":727,"path":"modules/comm/init.lua"}},{"name":"Destroy","desc":"Destroys the ClientComm object.","params":[],"returns":[],"function_type":"method","source":{"line":752,"path":"modules/comm/init.lua"}}],"properties":[],"types":[{"name":"ClientMiddlewareFn","desc":"The middleware function takes the arguments (as a table array), and should\\nreturn `true|false` to indicate if the process should continue.\\n\\nIf returning `false`, the optional varargs after the `false` are used as the new return values\\nto whatever was calling the middleware.","lua_type":"(args: {any}) -> (shouldContinue: boolean, ...: any)","source":{"line":625,"path":"modules/comm/init.lua"}},{"name":"ClientMiddleware","desc":"Array of middleware functions.","lua_type":"{ClientMiddlewareFn}","source":{"line":630,"path":"modules/comm/init.lua"}}],"name":"ClientComm","desc":"","realm":["Client"],"source":{"line":613,"path":"modules/comm/init.lua"}}')}}]);