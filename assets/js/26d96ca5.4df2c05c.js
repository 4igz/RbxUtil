"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[318],{49531:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a ServerComm object. The `namespace` parameter is used\\nin cases where more than one ServerComm object may be bound\\nto the same object. Otherwise, a default namespace is used.","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"namespace","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"ServerComm"}],"function_type":"static","source":{"line":558,"path":"modules/comm/init.lua"}},{"name":"BindFunction","desc":"Creates a RemoteFunction and binds the given function to it. Inbound\\nand outbound middleware can be applied if desired.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"fn","desc":"","lua_type":"(player: Player, ...: any) -> ...: any"},{"name":"inboundMiddleware","desc":"","lua_type":"ServerMiddleware?"},{"name":"outboundMiddleware","desc":"","lua_type":"ServerMiddleware?"}],"returns":[{"desc":"","lua_type":"RemoteFunction"}],"function_type":"method","source":{"line":582,"path":"modules/comm/init.lua"}},{"name":"WrapMethod","desc":"","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"name","desc":"","lua_type":"string"},{"name":"inboundMiddleware","desc":"","lua_type":"ServerMiddleware?"},{"name":"outboundMiddleware","desc":"","lua_type":"ServerMiddleware?"}],"returns":[{"desc":"","lua_type":"RemoteFunction"}],"function_type":"method","source":{"line":593,"path":"modules/comm/init.lua"}},{"name":"CreateSignal","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"inboundMiddleware","desc":"","lua_type":"ServerMiddleware?"},{"name":"outboundMiddleware","desc":"","lua_type":"ServerMiddleware?"}],"returns":[{"desc":"","lua_type":"RemoteSignal"}],"function_type":"method","source":{"line":603,"path":"modules/comm/init.lua"}},{"name":"Destroy","desc":"Destroy the ServerComm object.","params":[],"returns":[],"function_type":"method","source":{"line":610,"path":"modules/comm/init.lua"}}],"properties":[],"types":[{"name":"ServerMiddlewareFn","desc":"The middleware function takes the client player and the arguments (as a table array), and should\\nreturn `true|false` to indicate if the process should continue.\\n\\nIf returning `false`, the optional varargs after the `false` are used as the new return values\\nto whatever was calling the middleware.","lua_type":"(player: Player, args: {any}) -> (shouldContinue: boolean, ...: any)","source":{"line":544,"path":"modules/comm/init.lua"}},{"name":"ServerMiddleware","desc":"Array of middleware functions.","lua_type":"{ServerMiddlewareFn}","source":{"line":549,"path":"modules/comm/init.lua"}}],"name":"ServerComm","desc":"","realm":["Server"],"source":{"line":532,"path":"modules/comm/init.lua"}}')}}]);